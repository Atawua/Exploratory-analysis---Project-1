'q()'
q()
add2 <- function(x,y) {
x + y
}
add2(3,5)
source('~/.active-rstudio-document')
above <- function(x, n){
use <- x > n
x[use]
}
x <- 1:20
above(x, 12)
source('~/.active-rstudio-document')
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
columnmean(airquality)
submit()
library(swirl)
swirl()
source('/var/folders/rt/mtssy14d5416qv924gqhmn640000gn/T//RtmpIsugiq/boring_function.R')
boring_function <- function(x){
x
}
submit()
borin_function('My first function')
boring_function('My first function')
boring_function('My first function!')
boring_function
source('/var/folders/rt/mtssy14d5416qv924gqhmn640000gn/T//RtmpIsugiq/my_mean.R')
my_mean <- function(y) {
y <- sum(y)/length(y)
}
submit()
my_mean(c(4,5,10))
source('/var/folders/rt/mtssy14d5416qv924gqhmn640000gn/T//RtmpIsugiq/remainder.R')
remainder <- function(num, divison = 2){
num/division
}
submit()
View(remainder)
source('/private/var/folders/rt/mtssy14d5416qv924gqhmn640000gn/T/RtmpIsugiq/remainder.R')
remainder <- function(num, divisor = 2){
num/divisor
}
submit()
source('/var/folders/rt/mtssy14d5416qv924gqhmn640000gn/T//RtmpIsugiq/remainder.R')
remainder <- function(num, divisor = 2){
num/divisor
}
submit()
source('/var/folders/rt/mtssy14d5416qv924gqhmn640000gn/T//RtmpIsugiq/remainder.R')
remainder <- function(num, divisor = 2){
num/divisor
}
submit()
library(swirl)
swirl()
source('/var/folders/rt/mtssy14d5416qv924gqhmn640000gn/T//RtmpdB81z0/remainder.R')
remainder <- function(num, divisor = 2) {
num %% divisor
}
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
source('/var/folders/rt/mtssy14d5416qv924gqhmn640000gn/T//RtmpdB81z0/evaluate.R')
evaluate <- function(func, dat) {
func(dat)
}
submit()
evaluate(sd,c(1.4 , 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){c["1"]}, c(8,4,0))
evaluate(function(x){x <- c[1]}, c(8,4,0))
evaluate(function(x){x<-dat[1]},c(8,4,0))
evaluate(function(x){dat[1]},c(8,4,0))
evaluate(function(x){dat[1]},dat = c(8,4,0))
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[lenght(x)]},c(8,4,0))
?length
evaluate(function(x){x[length(dat)]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun!")
source('/var/folders/rt/mtssy14d5416qv924gqhmn640000gn/T//RtmpdB81z0/telegram.R')
telegram <- function(x){
paste("START", "x", "STOP", sep = " ", collapse = NULL)
}
submit()
View(telegram)
source('/private/var/folders/rt/mtssy14d5416qv924gqhmn640000gn/T/RtmpdB81z0/telegram.R')
View(telegram)
submit()
View(telegram)
source('/private/var/folders/rt/mtssy14d5416qv924gqhmn640000gn/T/RtmpdB81z0/telegram.R')
telegram <- function(x){
paste("START", x, "STOP")
}
submit()
View(telegram)
View(telegram)
View(telegram)
View(telegram)
View(telegram)
source('/private/var/folders/rt/mtssy14d5416qv924gqhmn640000gn/T/RtmpdB81z0/telegram.R')
telegram <- function(...){
paste("START", ..., "STOP")
}
submit()
telegram("Thank", "God")
source('/var/folders/rt/mtssy14d5416qv924gqhmn640000gn/T//RtmpdB81z0/mad_libs.R')
source('/var/folders/rt/mtssy14d5416qv924gqhmn640000gn/T//RtmpdB81z0/mad_libs.R')
mab_libs <- function(...){
args <- list(...)
place <- args[["place"]]
adjective <- args[["adjective"]]
noun <- args[["noun"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
source('/var/folders/rt/mtssy14d5416qv924gqhmn640000gn/T//RtmpdB81z0/mad_libs.R')
mab_libs <- function(...){
args <- list(...)
place <- args[["place"]]
adjective <- args[["adjective"]]
noun <- args[["noun"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
source('/var/folders/rt/mtssy14d5416qv924gqhmn640000gn/T//RtmpdB81z0/mad_libs.R')
mab_libs <- function(...){
args <- list(...)
place <- args[["place"]]
adjective <- args[["adjective"]]
noun <- args[["noun"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
source('/var/folders/rt/mtssy14d5416qv924gqhmn640000gn/T//RtmpdB81z0/mad_libs.R')
mad_libs <- function(...){
args <- list(...)
place <- args[["place"]]
adjective <- args[["adjective"]]
noun <- args[["noun"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mab_libs(place="London",adjective="John",noun="graduated")
mad_libs(place="London",adjective="John",noun="graduated")
source('/var/folders/rt/mtssy14d5416qv924gqhmn640000gn/T//RtmpdB81z0/bin_op.R')
submit()
source('/var/folders/rt/mtssy14d5416qv924gqhmn640000gn/T//RtmpdB81z0/bin_op.R')
submit()
I %p% love
"I" %p% "love" %p% "R!"
library(swirl)
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "october 17, 1986 08:24"
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y" %%H:%M")
t4 <- strptime(t3, "%B %d, %Y %%H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lappl(flag_colors,sum)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(unique_vals) unique_vals[2])
library(swirl)
swirl()
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags@animate)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
source('~/.active-rstudio-document')
makeCacheMatrix <- function(x = matrix()) {
## create a matrix object x and some associated sub-functions/methods
## define the cache m
m <- NULL
set <- function(y) {
x <<- y ## assign the input matrix y to the variable x in the
## parent environment
m <<- NULL ## re-initialize m in the parent environment to null
}
get <- function() x ## return the matrix x
setinverse <- function(inverse) m <<- inverse ## set the cache m equal
## to the inverse of the matrix x
getinverse <- function() m ## return the cached inverse of x
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
x <- (1,0,0, 0,1,0 ,0,0,1, nrow = 3, ncol = 3)
?matrix
x <- matrix(1,0,0, 0,1,0 ,0,0,1, nrow = 3, ncol = 3)
x <- matrix(c(1,0,0, 0,1,0 ,0,0,1), nrow = 3, ncol = 3)
makeCacheMatrix(x)
cacheSolve(x)
?`$`
m1 <- matrix(c(1/2, -1/4, -1, 3/4), nrow = 2, ncol = 2)
I2 <- matrix(c(1,0,0,1), nrow = 2, ncol = 2)
n1 <- matrix(c(6,2,8,4), nrow = 2, ncol = 2)
myMatrix_object <- makeCacheMatrix(m1)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
myMatrix_object$set(n2)
n2 <- matrix(c(5/8, -1/8, -7/8, 3/8), nrow = 2, ncol = 2)
cacheSolve(myMatrix_object)
source('~/Desktop/coursera R directory/CacheMatrix.R')
source('~/Desktop/coursera R directory/CacheSolve.R')
m1 <- matrix(c(1/2, -1/4, -1, 3/4), nrow = 2, ncol = 2)
I2 <- matrix(c(1,0,0,1), nrow = 2, ncol = 2)
n1 <- matrix(c(6,2,8,4), nrow = 2, ncol = 2)
solve(m1)
solve(n1)
myMatrix_object <- makeCacheMatrix(m1)
myMatrix_object <- MakeCacheMatrix(m1)
cachesolve(myMatrix_object)
source('~/Desktop/coursera R directory/CacheMatrix.R')
source('~/Desktop/coursera R directory/CacheSolve.R')
m1 <- matrix(c(1/2, -1/4, -1, 3/4), nrow = 2, ncol = 2)
I2 <- matrix(c(1,0,0,1), nrow = 2, ncol = 2)
n1 <- matrix(c(6,2,8,4), nrow = 2, ncol = 2)
solve(m1)
solve(n1)
myMatrix_object <- makeCacheMatrix(m1)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
n2 <- matrix(c(5/8, -1/8, -7/8, 3/8), nrow = 2, ncol = 2)
cacheSolve(myMatrix_object)
myMatrix_object$set(n2)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
m1 <- matrix(c(1/2, -1/4, -1, 3/4), nrow = 2, ncol = 2)
I2 <- matrix(c(1,0,0,1), nrow = 2, ncol = 2)
n1 <- matrix(c(6,2,8,4), nrow = 2, ncol = 2)
solve(m1)
solve(n1)
myMatrix_object <- makeCacheMatrix(m1)
source('~/Desktop/coursera R directory/CacheMatrix.R')
source('~/Desktop/coursera R directory/CacheSolve.R')
myMatrix_object <- makeCacheMatrix(m1)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
n2 <- matrix(c(5/8, -1/8, -7/8, 3/8), nrow = 2, ncol = 2)
myMatrix_object$set(n2)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
set.seed(1)
rpois(5, 2)
?set.seed
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
name(plants)
?name
as.name(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(n =100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5,10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
(x = cars$speed, y = cars$dist, xlab = "Speed")
(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
?plot
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
library(mtcars)
data(mtcars)
?boxplot()
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
library(swirl)
swirl()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, mpg)
qplot(displ, hwy, data = mpg)
library(swirl)
swirl()
swirl()
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone ~ Month, airquality)
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone(ppb)", col.axis = "blue", col.lab = "red")
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
may <- subset(airquality, Month = "5")
may <- subset(airquality, Month == 5)
?points
points(pch = 2, col = "blue")
points(may, pch = 2, col = "blue")
points(may$Wind, may$Ozone, pch = 17, col = "blue")
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month == 6:9)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col = "red", pch = 15)
points(notmay$Wind, notmay$Ozone, col = "red", pch = 8)
legend("topright", pch = c(17,8), col = c("blue","red"), legend = c("May","Other Months"))
abline(v = median(airquality$Wind), lty = 2, lwd = 2)
par(mfrow = c(1,2))
title(main = "Ozone and Wind")
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
## Reading my data
mydata <- read.table("household_power_consumption.txt", header = TRUE, sep = ";", nrows= 2075260, stringsAsFactors = FALSE, na.strings= "?")
## Subsetting my data according to the desired Dates
subdata <- mydata[mydata$Date == "1/2/2007" | mydata$Date == "2/2/2007",]
## Converting to Date format
subdata$Date <- as.Date(subdata$Date, format = "%d/%m/%Y")
## Create our new DateTime variable containing the combined Date and time to the appropriate format
subdata$DateTime <- strptime(paste(subdata$Date, subdata$Time), "%Y-%m-%d %H:%M:%S")
subdata$DateTime <- as.POSIXct(subdata$DateTime)
## Opening .png device and creating our plots
png("plot4.png", width = 480, height = 480)
## Divide our screen in 4 squares by column
par(mfcol = c(2,2))
with(subdata, plot(Global_active_power ~ DateTime, type = "l", ylab = "Global Active Power", xlab = ""))
with(subdata, plot(Sub_metering_1 ~ DateTime, type = "l", ylab = "Energy sub metering", xlab = ""))
with(subdata, lines(Sub_metering_2 ~ DateTime, col = "Red"))
with(subdata, lines(Sub_metering_3 ~ DateTime, col = "Blue"))
with(subdata, plot(Voltage ~ DateTime, xlab = "datetime", ylab = "Voltage", type = "l"))
with(subdata, plot(Global_reactive_power ~ DateTime, xlab = "datetime", type = "l"))
## Closing our device to generate our plot.png
dev.off()
setwd("~/Desktop/Exploratory analysis - Project 1")
## Reading my data
mydata <- read.table("household_power_consumption.txt", header = TRUE, sep = ";", nrows= 2075260, stringsAsFactors = FALSE, na.strings= "?")
## Subsetting my data according to the desired Dates
subdata <- mydata[mydata$Date == "1/2/2007" | mydata$Date == "2/2/2007",]
## Converting to Date format
subdata$Date <- as.Date(subdata$Date, format = "%d/%m/%Y")
## Create our new DateTime variable containing the combined Date and time to the appropriate format
subdata$DateTime <- strptime(paste(subdata$Date, subdata$Time), "%Y-%m-%d %H:%M:%S")
subdata$DateTime <- as.POSIXct(subdata$DateTime)
## Opening .png device and creating our plots
png("plot4.png", width = 480, height = 480)
## Divide our screen in 4 squares by column
par(mfcol = c(2,2))
with(subdata, plot(Global_active_power ~ DateTime, type = "l", ylab = "Global Active Power", xlab = ""))
with(subdata, plot(Sub_metering_1 ~ DateTime, type = "l", ylab = "Energy sub metering", xlab = ""))
with(subdata, lines(Sub_metering_2 ~ DateTime, col = "Red"))
with(subdata, lines(Sub_metering_3 ~ DateTime, col = "Blue"))
with(subdata, plot(Voltage ~ DateTime, xlab = "datetime", ylab = "Voltage", type = "l"))
with(subdata, plot(Global_reactive_power ~ DateTime, xlab = "datetime", type = "l"))
## Closing our device to generate our plot.png
dev.off()
